"use strict";(self.webpackChunk_feature_sliced_documentation=self.webpackChunk_feature_sliced_documentation||[]).push([[4461],{4720:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var s=n(1527),i=n(6736);const a={sidebar_position:2},o="Tutorial",r={id:"get-started/tutorial",title:"Tutorial",description:"Let's consider the application of Feature-Sliced Design on the example of TodoApp",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/get-started/tutorial.md",sourceDirName:"get-started",slug:"/get-started/tutorial",permalink:"/docs/get-started/tutorial",draft:!1,unlisted:!1,editUrl:"https://github.com/feature-sliced/documentation/edit/master/i18n/en/docusaurus-plugin-content-docs/current/get-started/tutorial.md",tags:[],version:"current",lastUpdatedAt:1697985820,formattedLastUpdatedAt:"Oct 22, 2023",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"getstartedSidebar",previous:{title:"Overview",permalink:"/docs/get-started/overview"},next:{title:"Decomposition cheatsheet",permalink:"/docs/get-started/cheatsheet"}},l={},d=[{value:"1. Preparation",id:"1-preparation",level:2},{value:"1.1 Initializing the project",id:"11-initializing-the-project",level:3},{value:"1.2 Preparing the structure",id:"12-preparing-the-structure",level:3},{value:"How it usually happens",id:"how-it-usually-happens",level:4},{value:"How can it be done otherwise",id:"how-can-it-be-done-otherwise",level:4},{value:"Adapting the structure to the desired view",id:"adapting-the-structure-to-the-desired-view",level:4},{value:"Layers: app",id:"layers-app",level:4},{value:"1.3 Enabling global styles",id:"13-enabling-global-styles",level:3},{value:"Install dependencies",id:"install-dependencies",level:4},{value:"Creating files for styles",id:"creating-files-for-styles",level:4},{value:"For css variables",id:"for-css-variables",level:5},{value:"To normalize styles",id:"to-normalize-styles",level:5},{value:"Connecting all styles",id:"connecting-all-styles",level:5},{value:"1.4 Adding routing",id:"14-adding-routing",level:3},{value:"Install dependencies",id:"install-dependencies-1",level:4},{value:"Add HOC to initialize the router",id:"add-hoc-to-initialize-the-router",level:4},{value:"Let&#39;s add real pages",id:"lets-add-real-pages",level:4},{value:"Temporary page, only for checking the routing",id:"temporary-page-only-for-checking-the-routing",level:5},{value:"Let&#39;s form the routes",id:"lets-form-the-routes",level:5},{value:"Connecting the routing to the application",id:"connecting-the-routing-to-the-application",level:5},{value:"Layers: app, pages",id:"layers-app-pages",level:4},{value:"1.5 Let&#39;s connect UIKit",id:"15-lets-connect-uikit",level:3},{value:"2. Implementing business logic",id:"2-implementing-business-logic",level:2},{value:"2.1 Let&#39;s analyze the functionality",id:"21-lets-analyze-the-functionality",level:3},{value:"Pages",id:"pages",level:4},{value:"Usual approach",id:"usual-approach",level:5},{value:"Alternative approach",id:"alternative-approach",level:5},{value:"Features",id:"features",level:4},{value:"Entities",id:"entities",level:4},{value:"Shared",id:"shared",level:4},{value:"What is the profit?",id:"what-is-the-profit",level:4},{value:"2.2 What else is worth remembering",id:"22-what-else-is-worth-remembering",level:3},{value:"Layers and responsibilities",id:"layers-and-responsibilities",level:4},{value:"Preparing modules for use",id:"preparing-modules-for-use",level:4},{value:"2.3 Let&#39;s display the basic task list",id:"23-lets-display-the-basic-task-list",level:3},{value:"(entities) Task card",id:"entities-task-card",level:4},{value:"(entities) Loading the task list",id:"entities-loading-the-task-list",level:4},{value:"(pages) Let&#39;s connect all the logic on the page",id:"pages-lets-connect-all-the-logic-on-the-page",level:4},{value:"2.4 Adding task status switching",id:"24-adding-task-status-switching",level:3},{value:"(entities) Switching the task status",id:"entities-switching-the-task-status",level:4},{value:"(features) Checkbox for the task",id:"features-checkbox-for-the-task",level:4},{value:"(pages) Embedding the checkbox in the page",id:"pages-embedding-the-checkbox-in-the-page",level:4},{value:"2.5 Adding task filtering",id:"25-adding-task-filtering",level:3},{value:"(entities) Filtering at the data level",id:"entities-filtering-at-the-data-level",level:4},{value:"(features) UI controls for filters",id:"features-ui-controls-for-filters",level:4},{value:"(pages) Implementing filtering in the page",id:"pages-implementing-filtering-in-the-page",level:4},{value:"2.6 Task Page",id:"26-task-page",level:3},{value:"(pages) The&quot;Task Card&quot; page",id:"pages-thetask-card-page",level:4},{value:"2.7 What&#39;s next?",id:"27-whats-next",level:3},{value:"Has the functionality tied to the user appeared?",id:"has-the-functionality-tied-to-the-user-appeared",level:4},{value:"Did you need to change the filtering logic?",id:"did-you-need-to-change-the-filtering-logic",level:4},{value:"Do you need to add more features to the task card, but at the same time, so that it can be used in the old way?",id:"do-you-need-to-add-more-features-to-the-task-card-but-at-the-same-time-so-that-it-can-be-used-in-the-old-way",level:4},{value:"Has a module become too complex to support?",id:"has-a-module-become-too-complex-to-support",level:4},{value:"Summary",id:"summary",level:2},{value:"We have learned how to apply the methodology for basic cases",id:"we-have-learned-how-to-apply-the-methodology-for-basic-cases",level:3},{value:"We got a scalable and flexible codebase",id:"we-got-a-scalable-and-flexible-codebase",level:3},{value:"Example",id:"example",level:3},{value:"See also",id:"see-also",level:2}];function c(e){const t=Object.assign({h1:"h1",p:"p",strong:"strong",ul:"ul",li:"li",em:"em",blockquote:"blockquote",a:"a",admonition:"admonition",h2:"h2",h3:"h3",pre:"pre",code:"code",h4:"h4",h5:"h5",img:"img",ol:"ol"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"tutorial",children:"Tutorial"}),"\n",(0,s.jsxs)(t.p,{children:["Let's consider the application of ",(0,s.jsx)(t.strong,{children:"Feature-Sliced Design"})," on the example of TodoApp"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"At first, we will prepare application basely (bootstrap, routing, styles)"}),"\n",(0,s.jsxs)(t.li,{children:["Then we will consider - how the concepts of the methodology help ",(0,s.jsx)(t.em,{children:"flexibly and effectively design business logic"})," without unnecessary costs"]}),"\n"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["There is ",(0,s.jsx)(t.a,{href:"https://codesandbox.io/s/github/feature-sliced/examples/tree/master/todo-app",children:"codesandbox-insert with the final solution"}),", which can help to clarify the implementation details at the end of the article"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Stack"}),": React, Effector, TypeScript, Sass, AntDesign"]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["The tutorial is designed to ",(0,s.jsx)(t.strong,{children:"reveal the practical idea of the methodology itself"}),". Therefore, the practices described here are largely suitable for other technological stacks of frontend projects"]})}),"\n",(0,s.jsx)(t.h2,{id:"1-preparation",children:"1. Preparation"}),"\n",(0,s.jsx)(t.h3,{id:"11-initializing-the-project",children:"1.1 Initializing the project"}),"\n",(0,s.jsx)(t.p,{children:"At the moment, there are many ways to generate and run a project template"}),"\n",(0,s.jsxs)(t.p,{children:["We will not focus too much on this step, but for quick initialization, you can use ",(0,s.jsx)(t.a,{href:"https://create-react-app.dev/docs/getting-started",children:"CRA (for React)"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cmd",children:"$ npx create-react-app todo-app --template typescript\n"})}),"\n",(0,s.jsx)(t.h3,{id:"12-preparing-the-structure",children:"1.2 Preparing the structure"}),"\n",(0,s.jsx)(t.p,{children:"We received the following blank for the project"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 App.css\n    \u251c\u2500\u2500 App.test.tsx\n    \u251c\u2500\u2500 App.tsx\n    \u251c\u2500\u2500 index.css\n    \u251c\u2500\u2500 index.ts\n    \u251c\u2500\u2500 logo.svg\n    \u251c\u2500\u2500 react-app-env.d.ts\n    \u251c\u2500\u2500 reportWebVitals.ts\n    \u251c\u2500\u2500 setupTests.ts\n    \u2514\u2500\u2500 index.tsx/\n"})}),"\n",(0,s.jsx)(t.h4,{id:"how-it-usually-happens",children:"How it usually happens"}),"\n",(0,s.jsxs)(t.p,{children:["And usually most projects at this stage ",(0,s.jsx)(t.a,{href:"https://www.pluralsight.com/guides/how-to-organize-your-react-+-redux-codebase#module-theflatstructure",children:"turn into something like this"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 api/\n    \u251c\u2500\u2500 components/\n    \u251c\u2500\u2500 containers/\n    \u251c\u2500\u2500 helpers/\n    \u251c\u2500\u2500 pages/\n    \u251c\u2500\u2500 routes/\n    \u251c\u2500\u2500 store/\n    \u251c\u2500\u2500 App.tsx\n    \u2514\u2500\u2500 index.tsx/\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"They can become such immediately, or after a long development"})}),"\n",(0,s.jsx)(t.p,{children:"At the same time, if we look inside we will most likely find:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Highly coupled directories by nesting"}),"\n",(0,s.jsx)(t.li,{children:"Strongly connected components with each other"}),"\n",(0,s.jsx)(t.li,{children:"A huge number of dissimilar components / containers in their respective folders, linked thoughtlessly"}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"how-can-it-be-done-otherwise",children:"How can it be done otherwise"}),"\n",(0,s.jsx)(t.p,{children:"Anyone who has been developing frontend projects for at least a long time understands the advantages and disadvantages of this approach."}),"\n",(0,s.jsxs)(t.p,{children:["However, most frontend projects are still something like this, since ",(0,s.jsx)(t.strong,{children:"there is no proven flexible and extensible alternative"})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.em,{children:["Multiply this by the free adaptations of the structure for each project, without a ban from the framework-and ",(0,s.jsx)(t.a,{href:"/docs/about/motivation",children:'we get "projects as unique as snowflakes"'})]})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"The purpose of this tutorial"})," is to show a different view of the usual practices in designing"]}),"\n",(0,s.jsx)(t.h4,{id:"adapting-the-structure-to-the-desired-view",children:"Adapting the structure to the desired view"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 app/                    # Initializing application logic\n    |    \u251c\u2500\u2500 index.tsx          #    Entrypoint for connecting the application (formerly App. tsx)\n    |    \u2514\u2500\u2500 index.css          #    Global application styles\n    \u251c\u2500\u2500 pages/                  #\n    \u251c\u2500\u2500 widgets/                #\n    \u251c\u2500\u2500 features/               #\n    \u251c\u2500\u2500 entities/               #\n    \u251c\u2500\u2500 shared/                 #\n    \u2514\u2500\u2500 index.tsx               # Connecting and rendering the application\n"})}),"\n",(0,s.jsxs)(t.p,{children:["At first glance the structure may seem strange, but over time you will notice that ",(0,s.jsx)(t.strong,{children:"you use familiar abstractions, but in a consistent and ordered form."})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Also, we enable support for absolute imports for convenience"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"title=tsconfig.json",children:'{\n  "compilerOptions": {\n    "baseUrl": "./src",\n    // Or aliases, if it\'s more convenient\n'})}),"\n",(0,s.jsx)(t.p,{children:"Here's how it will help us in the future"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-diff",children:'- import App from "../app"\n- import Button from "../../shared/ui/button";\n+ import App from "app"\n+ import Button from "shared/ui/button";\n'})}),"\n",(0,s.jsx)(t.h4,{id:"layers-app",children:"Layers: app"}),"\n",(0,s.jsxs)(t.p,{children:["As you can see , we have moved all the basic logic to the ",(0,s.jsx)(t.code,{children:"app/"})," directory"]}),"\n",(0,s.jsx)(t.p,{children:"It is there, according to the methodology, that all the preparatory logic should be placed:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["connecting global styles (",(0,s.jsx)(t.code,{children:"/app/styles/**"})," + ",(0,s.jsx)(t.code,{children:"/app/index.css"}),")"]}),"\n",(0,s.jsxs)(t.li,{children:["providers and HOCs with initializing logic (",(0,s.jsx)(t.code,{children:"/app/providers/**"}),")"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"For now, we will transfer all the existing logic there, and leave the other directories empty, as in the diagram above."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"title=app/index.tsx",children:'import "./index.css";\n\nconst App = () => {...}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"13-enabling-global-styles",children:"1.3 Enabling global styles"}),"\n",(0,s.jsx)(t.h4,{id:"install-dependencies",children:"Install dependencies"}),"\n",(0,s.jsx)(t.p,{children:"In the tutorial, we install sass, but you can also take any other preprocessor that supports imports"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cmd",children:"$ npm i sass\n"})}),"\n",(0,s.jsx)(t.h4,{id:"creating-files-for-styles",children:"Creating files for styles"}),"\n",(0,s.jsx)(t.h5,{id:"for-css-variables",children:"For css variables"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scss",metastring:"title=app/styles/vars.scss",children:":root {\n    --color-dark: #242424;\n    --color-primary: #108ee9;\n    ...\n}\n"})}),"\n",(0,s.jsx)(t.h5,{id:"to-normalize-styles",children:"To normalize styles"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scss",metastring:"title=app/styles/normalize.scss",children:"html {\n    scroll-behavior: smooth;\n}\n...\n"})}),"\n",(0,s.jsx)(t.h5,{id:"connecting-all-styles",children:"Connecting all styles"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scss",metastring:"title=app/styles/index.scss",children:'@import "./normalize.scss";\n@import "./vars.scss";\n...\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scss",metastring:"title=app/index.scss",children:'@import "./styles/index.scss";\n...\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"title=app/index.tsx",children:'import "./index.scss"\n\nconst App = () => {...}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"14-adding-routing",children:"1.4 Adding routing"}),"\n",(0,s.jsx)(t.h4,{id:"install-dependencies-1",children:"Install dependencies"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cmd",children:"$ npm i react-router react-router-dom compose-function\n$ npm i -D @types/react-router @types/react-router-dom @types/compose-function\n"})}),"\n",(0,s.jsx)(t.h4,{id:"add-hoc-to-initialize-the-router",children:"Add HOC to initialize the router"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"title=app/providers/with-router.tsx",children:'import { Suspense } from "react";\nimport { BrowserRouter } from "react-router-dom";\n\nexport const withRouter = (component: () => React.ReactNode) => () => (\n    <BrowserRouter>\n        <Suspense fallback="Loading...">\n            {component()}\n        </Suspense>\n    </BrowserRouter>\n);\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"title=app/providers/index.ts",children:'import compose from "compose-function";\nimport { withRouter } from "./with-router";\n\nexport const withProviders = compose(withRouter);\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"title=app/index.tsx",children:'import { withProviders } from "./providers";\n...\n\nconst App = () => {...}\n\nexport default withProviders(App);\n'})}),"\n",(0,s.jsx)(t.h4,{id:"lets-add-real-pages",children:"Let's add real pages"}),"\n",(0,s.jsxs)(t.admonition,{type:"note",children:[(0,s.jsx)(t.p,{children:"This is just one of the routing implementations"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"You can declare it declaratively or through the list of routes (+ react-router-config)"}),"\n",(0,s.jsx)(t.li,{children:"You can declare it at the pages or app level"}),"\n"]}),(0,s.jsx)(t.p,{children:"The methodology does not yet regulate the implementation of this logic in any way"})]}),"\n",(0,s.jsx)(t.h5,{id:"temporary-page-only-for-checking-the-routing",children:"Temporary page, only for checking the routing"}),"\n",(0,s.jsx)(t.p,{children:"You can delete it later"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"title=pages/test/index.tsx",children:"const TestPage = () => {\n    return <div>Test Page</div>;\n};\n\nexport default TestPage;\n"})}),"\n",(0,s.jsx)(t.h5,{id:"lets-form-the-routes",children:"Let's form the routes"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"title=pages/index.tsx",children:'// Or use @loadable/component, as part of the tutorial - uncritically\nimport { lazy } from "react";\nimport { Route, Routes, Navigate } from "react-router-dom";\n\nconst TestPage = lazy(() => import("./test"));\n\nexport const Routing = () => {\n    return (\n        <Routes>\n            <Route path="/" element={<TestPage/>} />\n            <Route path="*" element={<Navigate to="/" />} />\n        </Routes>\n    );\n};\n'})}),"\n",(0,s.jsx)(t.h5,{id:"connecting-the-routing-to-the-application",children:"Connecting the routing to the application"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"title=app/index.tsx",children:'import { Routing } from "pages";\n\nconst App = () => (\n    // Potentially you can insert here \n    // A single header for the entire application\n    // Or do it on separate pages\n    <Routing />\n)\n...\n'})}),"\n",(0,s.jsx)(t.h4,{id:"layers-app-pages",children:"Layers: app, pages"}),"\n",(0,s.jsx)(t.p,{children:"Here we used several layers at once:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"app"})," - to initialize the router ",(0,s.jsx)(t.em,{children:"(HOC: withRouter)"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"pages"})," - for storing page modules"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"15-lets-connect-uikit",children:"1.5 Let's connect UIKit"}),"\n",(0,s.jsxs)(t.p,{children:["To simplify the tutorial, we will use the ready-made UIKit from ",(0,s.jsx)(t.a,{href:"https://ant.design/components/overview/",children:"AntDesign"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cmd",children:"$ npm i antd @ant-design/icons\n"})}),"\n",(0,s.jsxs)(t.admonition,{type:"tip",children:[(0,s.jsxs)(t.p,{children:["But you can use ",(0,s.jsx)(t.strong,{children:"any other UIKit"})," or ",(0,s.jsx)(t.strong,{children:"create your own"})," by placing the components in ",(0,s.jsx)(t.code,{children:"shared/ui"})," - this is where it is recommended to place UIKit of application:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import { Checkbox } from "antd"; // ~ "shared/ui/checkbox"\nimport { Card } from "antd"; // ~ "shared/ui/card"\n'})})]}),"\n",(0,s.jsx)(t.h2,{id:"2-implementing-business-logic",children:"2. Implementing business logic"}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"We will try to focus not on the implementation of each module, but on their sequential composition"})}),"\n",(0,s.jsx)(t.h3,{id:"21-lets-analyze-the-functionality",children:"2.1 Let's analyze the functionality"}),"\n",(0,s.jsxs)(t.p,{children:["Before starting the code, we need to decide - ",(0,s.jsx)(t.a,{href:"/docs/about/understanding/needs-driven",children:"what value we want to convey to the end user"})]}),"\n",(0,s.jsxs)(t.p,{children:["To do this, we decompose our functionality ",(0,s.jsxs)(t.em,{children:["by responsibility scopes ",(0,s.jsx)(t.a,{href:"/docs/reference/layers",children:"(layers)"})]})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"layers-flow-themed",src:n(8880).Z+"",width:"1152",height:"355"})}),"\n",(0,s.jsx)(t.h4,{id:"pages",children:"Pages"}),"\n",(0,s.jsx)(t.p,{children:"We will outline the basic necessary pages, and user expectations from them:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"TasksListPage"}),' - the "Task List" page']}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"View the task list"}),"\n",(0,s.jsx)(t.li,{children:"Go to the page of a specific task"}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.em,{children:"Mark a specific task completed/unfulfilled"})}),"\n",(0,s.jsx)(t.li,{children:"Set filtering by completed / unfulfilled tasks"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"TaskDetailsPage"}),' - page "Task card"']}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"View information about the task"}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.em,{children:"Mark a specific task as completed/unfulfilled"})}),"\n",(0,s.jsx)(t.li,{children:"Go back to the task list"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Each of the described features is a part of the functionality"}),"\n",(0,s.jsx)(t.h5,{id:"usual-approach",children:"Usual approach"}),"\n",(0,s.jsx)(t.p,{children:"And there is a great temptation"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"or implement all the logic in the directory of each specific page."}),"\n",(0,s.jsxs)(t.li,{children:['or put all" possibly reused "modules in the shared folder ',(0,s.jsx)(t.code,{children:"src/components"})," or similar"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["But if such a solution would be suitable for a small and short-lived project, then in real corporate development, it ",(0,s.jsx)(t.strong,{children:"can put an end"})," to the further development of the project, turning it into ",(0,s.jsx)(t.strong,{children:'"another dense legacy"'})]}),"\n",(0,s.jsx)(t.p,{children:"This is due to the usual conditions of the project development:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"requirements change quite often"}),"\n",(0,s.jsx)(t.li,{children:"there are new circumstances"}),"\n",(0,s.jsx)(t.li,{children:"the technical debt is accumulating every day and it is becoming more difficult to add new features"}),"\n",(0,s.jsx)(t.li,{children:"it is necessary to scale both the project itself and its team"}),"\n"]}),"\n",(0,s.jsx)(t.h5,{id:"alternative-approach",children:"Alternative approach"}),"\n",(0,s.jsx)(t.p,{children:"Even with the basic partitioning, we see that:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["there are common entities between the pages and their display ",(0,s.jsx)(t.em,{children:"(Task)"})]}),"\n",(0,s.jsxs)(t.li,{children:["there are common features ",(0,s.jsx)(t.em,{children:"between the pages (Mark the task completed / unfulfilled)"})]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Accordingly, it seems logical to continue to decompose the task, but already based on the above-mentioned features for the user."}),"\n",(0,s.jsx)(t.h4,{id:"features",children:"Features"}),"\n",(0,s.jsx)(t.p,{children:"Parts of functionality that bring value to the user"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"<ToggleTask />"})," - (component) Mark a task as completed / unfulfilled"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"<TasksFilters/>"})," - (component) Set filtering for the task list"]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"entities",children:"Entities"}),"\n",(0,s.jsx)(t.p,{children:"Business entities on which a higher-level logic will be built"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"<TaskCard />"})," - (component) Task card, with information display"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"getTasksListFx({ filters })"})," - (effect) Loading the task list with parameters"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"getTaskByIdFx(taskId: number)"}),"- (effect) Uploading a task by ID"]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"shared",children:"Shared"}),"\n",(0,s.jsx)(t.p,{children:"Reused shared modules, without binding to the domain scopes"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"<Card />"})," - (component) UIKit component","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.em,{children:"At the same time, you can either implement your own UIKit for the project, or use a ready-made one"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"getTasksList({ filters })"})," - (api) Loading the task list with parameters"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"getTaskById(taskId: number)"})," - (api) Loading a task by ID"]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"what-is-the-profit",children:"What is the profit?"}),"\n",(0,s.jsxs)(t.p,{children:["Now all modules can be designed with ",(0,s.jsx)(t.a,{href:"/docs/reference/isolation/coupling-cohesion",children:"low coupling"})," and ",(0,s.jsx)(t.a,{href:"/docs/reference/layers",children:"with their own scope of responsibility"}),", as well as distributed across the team without conflicts during development"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.em,{children:["And most importantly, now each module serves to build a specific business value, which reduces the risks for creating ",(0,s.jsx)(t.a,{href:"/docs/about/understanding/needs-driven",children:'"features for the sake of features"'})]})}),"\n",(0,s.jsx)(t.h3,{id:"22-what-else-is-worth-remembering",children:"2.2 What else is worth remembering"}),"\n",(0,s.jsx)(t.h4,{id:"layers-and-responsibilities",children:"Layers and responsibilities"}),"\n",(0,s.jsxs)(t.p,{children:["As described above, thanks to the layered structure, we can ",(0,s.jsx)(t.strong,{children:"predictably distribute the complexity of the application"})," according to ",(0,s.jsx)(t.a,{href:"/docs/reference/layers",children:"scopes of responsibility, i.e. layers"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"At the same time, a higher-level logic is built on the basis of the underlying layers:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"// (shared)         => (entities)  + (features)     => (pages)\n<Card> + <Checkbox> => <TaskCard/> + <ToggleTask/>  => <TaskPage/>\n"})}),"\n",(0,s.jsx)(t.h4,{id:"preparing-modules-for-use",children:"Preparing modules for use"}),"\n",(0,s.jsxs)(t.p,{children:["Each implemented module must provide its own ",(0,s.jsx)(t.a,{href:"/docs/reference/public-api",children:"public interface"})," for use:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"title={layer}/foo/index.ts",children:'export { Card as FooCard, Thumbnail as FooThumbnail, ... } from "./ui";\nexport * as fooModel from "./model"; \n'})}),"\n",(0,s.jsxs)(t.admonition,{type:"info",children:[(0,s.jsxs)(t.p,{children:["If you need named namespace exports for the Public API declaration, you can look aside ",(0,s.jsx)(t.a,{href:"https://babeljs.io/docs/en/babel-plugin-proposal-export-namespace-from",children:"@babel/plugin-proposal-export-namespace-from"})]}),(0,s.jsx)(t.p,{children:"Or, as an alternative, use a more detailed design"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"title={layer}/foo/index.ts",children:'import { Card as FooCard, Thumbnail as FooThumbnail, ... } from "./ui";\nimport * as fooModel from "./model"; \n\nexport { FooCard, FooThumbnail, fooModel };\n'})})]}),"\n",(0,s.jsx)(t.h3,{id:"23-lets-display-the-basic-task-list",children:"2.3 Let's display the basic task list"}),"\n",(0,s.jsx)(t.h4,{id:"entities-task-card",children:"(entities) Task card"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"title=entities/task/ui/task-row/index.tsx",children:'import { Link } from "react-router-dom";\nimport cn from "classnames"; // we can safely use the analogy \nimport { Row } from "antd"; // ~ "shared/ui/row"\n\nexport const TaskRow = ({ data, titleHref }: TaskRowProps) => {\n    return (\n        <Row className={cn(styles.root, { [styles.completed]: data.completed })}>\n            {titleHref ? <Link to={titleHref}>{data.title}</Link> : data.title}\n        </Row>\n    )\n}\n'})}),"\n",(0,s.jsx)(t.h4,{id:"entities-loading-the-task-list",children:"(entities) Loading the task list"}),"\n",(0,s.jsx)(t.p,{children:"You can split it by the type of entity, or store everything in the duck-modular style"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["For more information about the implementation of the API according to the tutorial, see ",(0,s.jsx)(t.a,{href:"https://github.com/feature-sliced/examples/tree/master/todo-app/src/shared/api",children:"here"})]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"title=entities/task/model/index.ts",children:'import { createStore, combine, createEffect, createEvent } from "effector";\nimport { useStore } from "effector-react";\n\nimport { typicodeApi } from "shared/api";\nimport type { Task } from "shared/api";\n\n// Each effect can also have its own additional. processing\nconst getTasksListFx = createEffect((params?: typicodeApi.tasks.GetTasksListParams) => {\n  // There may also be an additional processing the effect\n  return typicodeApi.tasks.getTasksList(params);\n});\n\n// Can also be stored in a normalized form\nexport const $tasks = createStore<Task[]>([])\n  .on(getTasksListFx.doneData, (_, payload) => ...)\n\nexport const $tasksList = combine($tasks, (tasks) => Object.values(tasks));\n// You can also add other things like `isEmpty`, `isLoading`, ...\n'})}),"\n",(0,s.jsx)(t.h4,{id:"pages-lets-connect-all-the-logic-on-the-page",children:"(pages) Let's connect all the logic on the page"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"title=pages/tasks-list/index.tsx",children:'import { useEffect } from "react";\n// If you feel confident with @effector/reflect - can use it \n// Within the tutorial non-critical \nimport { useStore } from "effector";\nimport { Layout, Row, Col, Typography, Spin, Empty } from "antd"; // ~ "shared/ui/{...}"\n\nimport { TaskRow, taskModel } from "entities/task";\nimport styles from "./styles.module.scss";\n\nconst TasksListPage = () => {\n  const tasks = useStore(taskModel.$tasksList);\n  const isLoading = useStore(taskModel.$tasksListLoading);\n  const isEmpty = useStore(taskModel.$tasksListEmpty);\n\n  /**\n   * Requesting data when loading the page\n   * @remark is a bad practice in the effector world and is presented here-just for a visual demonstration\n   * It is better to fetch via event.pageMounted or reflect\n   */\n  useEffect(() => taskModel.getTasksListFx(), []);\n\n  return (\n    <Layout className={styles.root}>\n      <Layout.Toolbar className={styles.toolbar}>\n        <Row justify="center">\n          <Typography.Title level={1}>Tasks List</Typography.Title>\n        </Row>\n        {/* TODO: TasksFilters */}\n      </Layout.Toolbar>\n      <Layout.Content className={styles.content}>\n        <Row gutter={[0, 20]} justify="center">\n          {isLoading && <Spin size="large" />}\n          {!isLoading && tasks.map((task) => (\n            <Col key={task.id} span={24}>\n              <TaskRow\n                data={task}\n                titleHref={`/${task.id}`}\n                // TODO: ToggleTaskCheckbox\n              />\n            </Col>\n          ))}\n          {!isLoading && isEmpty && <Empty description="No tasks found" />}\n        </Row>\n      </Layout.Content>\n    </Layout>\n  );\n};\n'})}),"\n",(0,s.jsx)(t.h3,{id:"24-adding-task-status-switching",children:"2.4 Adding task status switching"}),"\n",(0,s.jsx)(t.h4,{id:"entities-switching-the-task-status",children:"(entities) Switching the task status"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"title=entities/task/model/index.ts",children:'export const toggleTask = createEvent<number>();\n\nexport const $tasks = createStore<Task[]>(...)\n  ...\n  .on(toggleTask, (state, taskId) => produce(state, draft => {\n    const task = draft[taskId];\n    task.completed = !task.completed;\n    console.log(1, { taskId, state, draft: draft[taskId].completed });\n  }))\n\n\n// We make a hook to get involved in updates react\n// @see In the case of effector, using a hook is an extreme measure, since computed stores are more preferable\nexport const useTask = (taskId: number): import("shared/api").Task | undefined => {\n  return useStoreMap({\n    store: $tasks,\n    keys: [taskId],\n    fn: (tasks, [id]) => tasks[id] ?? null\n  });\n};\n'})}),"\n",(0,s.jsx)(t.h4,{id:"features-checkbox-for-the-task",children:"(features) Checkbox for the task"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"title=features/toggle-task/ui.tsx",children:'import { Checkbox } from "antd"; // ~ "shared/ui/checkbox"\nimport { taskModel } from "entities/task";\n\n// resolve / unresolve\nexport const ToggleTask = ({ taskId }: ToggleTaskProps) => {\n    const task = taskModel.useTask(taskId);\n    if (!task) return null;\n\n    return (\n        <Checkbox \n            onClick={() => taskModel.toggleTask(taskId)} \n            checked={task.completed}\n        />\n    )\n}\n'})}),"\n",(0,s.jsx)(t.h4,{id:"pages-embedding-the-checkbox-in-the-page",children:"(pages) Embedding the checkbox in the page"}),"\n",(0,s.jsx)(t.p,{children:"What is noteworthy is that the task card does not know at all about the page where it is used, nor about what action buttons can be inserted into it (the same can be said about the feature itself)"}),"\n",(0,s.jsxs)(t.p,{children:["This approach allows you to simultaneously ",(0,s.jsx)(t.strong,{children:"competently share responsibility"})," and ",(0,s.jsx)(t.strong,{children:"flexibly reuse logic during implementation"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"title=pages/tasks-list/index.tsx",children:'import { ToggleTask } from "features/toggle-task";\nimport { TaskRow, taskModel } from "entities/task";\n...\n<Col key={task.id} span={24}>\n      <TaskRow\n        ...\n        before={<ToggleTask taskId={task.id} withStatus={false} />}\n      />\n</Col>\n'})}),"\n",(0,s.jsx)(t.h3,{id:"25-adding-task-filtering",children:"2.5 Adding task filtering"}),"\n",(0,s.jsx)(t.h4,{id:"entities-filtering-at-the-data-level",children:"(entities) Filtering at the data level"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"title=entities/task/model/index.ts",children:'import { combine, createEvent, createStore } from "effector";\n\nexport type QueryConfig = { completed?: boolean };\n\nconst setQueryConfig = createEvent<QueryConfig>();\n\n// Can be moved to a separate directory (for storing multiple models)\nexport const $queryConfig = createStore<QueryConfig>({})\n  .on(setQueryConfig, (_, payload) => payload);\n\n/**\n * Filtered Tasks\n * @remark Can be handled at the effects level - but then you need to connect additional logic to the store\n * > For example, hide / show the task at the `toggleTask` event\n */\nexport const $tasksFiltered = combine(\n  $tasksList,\n  $queryConfig,\n  (tasksList, config) => {\n    return tasksList.filter(task => (\n      config.completed === undefined ||\n      task.completed === config.completed\n  ))},\n);\n'})}),"\n",(0,s.jsx)(t.h4,{id:"features-ui-controls-for-filters",children:"(features) UI controls for filters"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"title=features/tasks-filters/ui.tsx",children:'// If you feel confident with @effector/reflect, you can immediately use it\n// As part of tutorial uncritically\nimport { useStore } from "effector";\nimport { Radio } from "antd"; // ~ "shared/ui/radio"\n\nimport { taskModel } from "entities/task";\nimport { filtersList, getFilterById, DEFAULT_FILTER } from "./config";\n\nexport const const TasksFilters = () => {\n  const isLoading = useStore($tasksListLoading);\n\n  return (\n    <Radio.Group defaultValue={DEFAULT_FILTER} buttonStyle="solid">\n      {filtersList.map(({ title, id }) => (\n        <Radio.Button\n          key={id}\n          onClick={() => taskModel.setQueryConfig(getFilterById(id).config)}\n          value={id}\n          disabled={isLoading}\n        >\n          {title}\n        </Radio.Button>\n      ))}\n    </Radio.Group>\n  );\n};\n'})}),"\n",(0,s.jsx)(t.h4,{id:"pages-implementing-filtering-in-the-page",children:"(pages) Implementing filtering in the page"}),"\n",(0,s.jsx)(t.p,{children:"And we implemented the logic again, without asking too many questions:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"And where to put the filtering logic?"}),"\n",(0,s.jsx)(t.li,{children:"Can these filters be reused in the future?"}),"\n",(0,s.jsx)(t.li,{children:"Can filters know about the page context?"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"We just divided the logic according to the scopes of responsibility (layers)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"title=pages/tasks-list/index.tsx",children:'import { TasksFilters } from "features/tasks-filters";\n...\n<Layout.Toolbar className={styles.toolbar}>\n    ...\n    <Row justify="center">\n        <TasksFilters />\n    </Row>\n</Layout.Toolbar>\n'})}),"\n",(0,s.jsxs)(t.admonition,{type:"note",children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:'At the current stage, such a division may seem superfluous - "Why not put everything at once at the page / feature level"?'})}),(0,s.jsx)(t.p,{children:"But then let's try to ask questions ourselves:"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Where are the guarantees that the complexity of the page will not increase in the future so much that all aspects of logic will be strongly intertwined? How can I add new functionality at no extra cost?"}),"\n",(0,s.jsx)(t.li,{children:"Where are the guarantees that a new person who has joined the team (or even you, if you leave the project for six months) will understand what is happening here?"}),"\n",(0,s.jsx)(t.li,{children:"How to build logic so as not to disrupt the data flow / reactivity with other features?"}),"\n",(0,s.jsx)(t.li,{children:"What if this filtering logic is so strongly attached to the context of the page that it will be impossible to use it on other pages?"}),"\n"]}),(0,s.jsxs)(t.p,{children:["This is why we ",(0,s.jsx)(t.strong,{children:"divide the responsibility"})," so that each layer is engaged in only one task, and so that each of the developers understands this"]})]}),"\n",(0,s.jsx)(t.h3,{id:"26-task-page",children:"2.6 Task Page"}),"\n",(0,s.jsx)(t.p,{children:"We implement the task page in the same way:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"We highlight the shared logic"}),"\n",(0,s.jsx)(t.li,{children:"We highlight the entities logic"}),"\n",(0,s.jsx)(t.li,{children:"We highlight the features logic"}),"\n",(0,s.jsx)(t.li,{children:"We highlight the pages logic"}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"pages-thetask-card-page",children:'(pages) The"Task Card" page'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"title=pages/task-details/index.tsx",children:'import { ToggleTask } from "features/toggle-task";\nimport { TaskCard, taskModel } from "entities/task";\nimport { Layout, Button } from "antd"; // ~ "shared/ui/{...}"\nimport styles from "./styles.module.scss";\n\nconst TaskDetailsPage = (props: Props) => {\n    const taskId = Number(props.match?.params.taskId);\n    const task = taskModel.useTask(taskId);\n    const isLoading = useStore(taskModel.$taskDetailsLoading);\n\n  /**\n   * Requesting data on the task\n   * @remark is a bad practice in the effector world and is presented here-just for a visual demonstration\n   * It is better to fetch via event.pageMounted or reflect\n   */\n    useEffect(() => taskModel.getTaskByIdFx({ taskId }), [taskId]);\n\n    // You can transfer part of the logic to entity/task/card (as a container)\n    if (!task && !isLoading) {\n        return ...\n    }\n\n    return (\n        <Layout className={styles.root}>\n            <Layout.Content className={styles.content}>\n                <TaskCard\n                    data={task}\n                    size="default"\n                    loading={isLoading}\n                    className={styles.card}\n                    bodyStyle={{ height: 400 }}\n                    extra={<Link to="/">Back to TasksList</Link>}\n                    actions={[\n                        <ToggleTask key="toggle" taskId={taskId} />\n                    ]}\n                />\n            </Layout.Content>\n        </Layout>\n    )\n};\n'})}),"\n",(0,s.jsx)(t.h3,{id:"27-whats-next",children:"2.7 What's next?"}),"\n",(0,s.jsx)(t.p,{children:"And then new tasks arrive, new requirements are identified"}),"\n",(0,s.jsx)(t.p,{children:"At the same time, the old code base does not require significant rework"}),"\n",(0,s.jsx)(t.h4,{id:"has-the-functionality-tied-to-the-user-appeared",children:"Has the functionality tied to the user appeared?"}),"\n",(0,s.jsxs)(t.p,{children:["=> Adding ",(0,s.jsx)(t.code,{children:"entities/user"})]}),"\n",(0,s.jsx)(t.h4,{id:"did-you-need-to-change-the-filtering-logic",children:"Did you need to change the filtering logic?"}),"\n",(0,s.jsxs)(t.p,{children:["=> Changing the processing at the ",(0,s.jsx)(t.code,{children:"entities"})," or ",(0,s.jsx)(t.code,{children:"pages"})," level, depending on the scale"]}),"\n",(0,s.jsx)(t.h4,{id:"do-you-need-to-add-more-features-to-the-task-card-but-at-the-same-time-so-that-it-can-be-used-in-the-old-way",children:"Do you need to add more features to the task card, but at the same time, so that it can be used in the old way?"}),"\n",(0,s.jsxs)(t.p,{children:["=> Add features and insert them into the card only on the desired ",(0,s.jsx)(t.strong,{children:"page"})]}),"\n",(0,s.jsx)(t.h4,{id:"has-a-module-become-too-complex-to-support",children:"Has a module become too complex to support?"}),"\n",(0,s.jsxs)(t.p,{children:["=> Thanks to the embedded architecture, we can only factor this module in isolation-without implicit side effects for others ",(0,s.jsx)(t.a,{href:"https://youtu.be/BWAeYuWFHhs?t=1625",children:"(and even rewrite it from scratch)"})]}),"\n",(0,s.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(t.h3,{id:"we-have-learned-how-to-apply-the-methodology-for-basic-cases",children:"We have learned how to apply the methodology for basic cases"}),"\n",(0,s.jsx)(t.p,{children:"Obviously, the world is much more complicated, but now we have already caught on to some controversial points and resolved them in such a way that the project remains supported and extensible."}),"\n",(0,s.jsx)(t.h3,{id:"we-got-a-scalable-and-flexible-codebase",children:"We got a scalable and flexible codebase"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Reused and expandable modules"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.em,{children:"shared, features, entities"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Uniform and predictable distribution of logic"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.em,{children:"Since the composition goes in the same direction (the overlying layers use the underlying ones) , we can predictably track and modify it without fear of unforeseen consequences"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"The structure of the application, which tells about the business logic for itself"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["What pages are there?","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"TasksList"}),", ",(0,s.jsx)(t.code,{children:"TaskDetails"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["What features are there? What can the user do?","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"ToggleTask"})," ",(0,s.jsx)(t.code,{children:"TasksFilters"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["What are the business entities? What is the work being done with?","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"Task (TaskCard, ...)"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["What can be reused from the auxiliary?","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"UIKit (Card, ...)"})," ",(0,s.jsx)(t.code,{children:"API (tasksApi)"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(t.p,{children:["Below in ",(0,s.jsx)(t.a,{href:"https://codesandbox.io/s/github/feature-sliced/examples/tree/master/todo-app",children:"Codesandbox"})," is an example of the resulting TodoApp, where you can study in detail the final structure of the application"]}),"\n",(0,s.jsx)("iframe",{class:"codesandbox",src:"https://codesandbox.io/embed/github/feature-sliced/examples/tree/master/todo-app?autoresize=1&fontsize=14&hidenavigation=1&theme=dark&codemirror=1",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),"\n",(0,s.jsx)(t.h2,{id:"see-also",children:"See also"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://www.pluralsight.com/guides/how-to-organize-your-react-+-redux-codebase",children:"(Overview) How to Organize Your React + Redux Codebase"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Analysis of several approaches to structuring React projects"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/docs/guides",children:"Guides and examples of the methodology application (+ Migration from v1)"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/docs/reference",children:"Reference material on the methodology"})}),"\n"]})]})}const h=function(e={}){const{wrapper:t}=Object.assign({},(0,i.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(c,e)})):c(e)}},8880:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/layers_flow-88496fd4047ede3ddbdbd73d4a46ddae.png"},6736:(e,t,n)=>{n.d(t,{Zo:()=>r,ah:()=>a});var s=n(959);const i=s.createContext({});function a(e){const t=s.useContext(i);return s.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const o={};function r({components:e,children:t,disableParentContext:n}){let r;return r=n?"function"==typeof e?e({}):e||o:a(e),s.createElement(i.Provider,{value:r},t)}}}]);